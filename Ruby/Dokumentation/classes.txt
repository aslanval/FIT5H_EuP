OOP - Objekt orientierte Programmierung

Klassen
	Klassen bilden den Plan von konkreten Objekten.
	Def:
		class Player

		end
		Eine Klasse wird durch die Verwendung des Schlüsselwortes class 
		definiert.
		Die Definition ist immer in einen Block eingeschlossen.

Objekt:
	Wenn ich mit einer Klasse arbeiten will, dann erzeuge ich ein Objekt, 
	dass in einer Variable gespeichert wird.
		Obj = Player.new
	Ein neues Objekt wird in einer Variablen mit beliebiger Bezeichnung
	gespeichert.
	Es wird mit dem namen der Klasse und dem Aufruf der Methode new erzeugt.
	Das Objekt hat alle Eigenschaften (Attribute) und Fähigkeiten (Methoden),
	die in der Klasse definiert sind.

Konstruktor:
	Beim Erzeugen eines neuen Objektes mit Player.new wird automatisch eine 
	Methode 'initialize' aufgerufen. Diese Methode gibt es in jeder Ruby-Klasse.
	Es ist üblich diese existierende Methode mit einer eigenen Methode zu 
	überschreiben, um dort Basiswerte des Objektes festzulegen.
	Bsp:
		def initialize(name, health=100)
			@name = name
			@health = health
		end

Instanzvariable / Eigenschaften
	In der OOP hat ein Objekt bestimmte Eigenschaften, die es charakterisieren.
	In Ruby werden diese Eigenschaften als Instanzvariablen definiert und 
	ein '@' wird dem Namen vorangestellt.
	Beispiel: @name
	Das Besondere einer Instanzvariable oder Eigenschaft ist, dass sie in der 
	ganzen Klasse gilt und verwertet werden kann.
	Wichtig: Variablen, die innerhalb von einem Block definiert werden und 
	kein '@' vorangestellt haben, sind sogenannte lokale Variablen und gelten 
	nur	innerhalb des Blockes in dem sie definiert sind.
	
	Eine Instanzvariable wird zu einer Eigenschaft, indem es in der Klasse Methoden gibt,
	die den Zugriff von Außerhalb (Aufrufe durch das Objekt) ermöglichen.
	Eine Eigenschaft hat einen sogenannten Setter, der es ermöglicht einen Wert zu setzen;
	und einen Getter, der einen Wert zurück gibt

	Getter:
		def name
			@name
		end
		Die Methode heißt genau so wie die Instanzvariable, ohne das @. Sie hat die
		Aufgabe, den Wert der Instanzvariable 'name' zurückzugeben.
		Aufruf:
			puts obj.name
			gibt den Namen des Players aus
		Kurzform:
			Anstelle einer Methodendefinition kann ich eine Kurzform verwenden:
				attr_reader :name
	Setter:
		def name=(name)
			@name = name
		end
		Der Setter zum Speichern eines Wertes in einer Instanzvariable heisst wie
		die Instanzvariable mit einem = im Namen.
		Aufrufe:
			obj.name = "Supergirl"

		Kurzform:  
				attr_writer :name

	Kurzform für Setter und Getter:
		attr_accessor :name

	Virtuelles Attribut:
		Ein vrituelles Attribut ist eine Methode, die so aussieht wie eine Eigenschaft,
		bzw. genutzt werden kann, wie eine Eigenschaft, die allerdings keine Instanzvariable hat;
		also keine echte Eigenschaft ist, obwohl sie von außen so aussieht.
		def normalized health
			@health * 1000		#health gibt es schon, es wird nur verändert
		end
		Aufruf:
			puts obj.normalized_health